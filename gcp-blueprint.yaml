tosca_definitions_version: cloudify_dsl_1_3

imports:
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/4.1/resources/rest-service/cloudify/types/types.yaml
  - http://www.getcloudify.org/spec/gcp-plugin/1.2.0/plugin.yaml
  - https://raw.githubusercontent.com/cloudify-incubator/cloudify-utilities-plugin/1.2.5/plugin.yaml

inputs:

  client_x509_cert_url:
    type: string
    default: { get_secret: client_x509_cert_url }

  client_email:
    type: string
    default: { get_secret: client_email }

  client_id:
    type: string
    default: { get_secret: client_id }

  project_id:
    type: string
    default: { get_secret: project_id }

  private_key_id:
    type: string
    default: { get_secret: private_key_id }

  private_key:
    type: string
    default: { get_secret: private_key }

  zone:
    type: string
    default: { get_secret: zone }

  region:
    type: string
    default: { get_secret: region }

  image:
    description: >
      A GCE Image ID. Tested with a Ubuntu 14.04 image.
    default: { get_secret: centos_core_image }

  instance_type:
    description: >
      A GCE instance sytpe.
    default: { get_secret: small_instance_type }

  agent_user:
    description: The user name of the agent on the instance created from the image.
    default: centos

  resource_prefix:
    default: cfymaria

  new_password:
    default: new_password

  users:
    default:
      demo:
        privileges: [ALL PRIVILEGES]
      demo:
        host: localhost
        privileges: [ALL PRIVILEGES]

dsl_definitions:

  client_config: &gcp_config
    auth:
      type: service_account
      auth_uri: https://accounts.google.com/o/oauth2/auth
      token_uri: https://accounts.google.com/o/oauth2/token
      auth_provider_x509_cert_url: https://www.googleapis.com/oauth2/v1/certs
      client_x509_cert_url: { get_input: client_x509_cert_url }
      client_email: { get_input: client_email }
      client_id: { get_input: client_id }
      project_id: { get_input: project_id }
      private_key_id: { get_input: private_key_id }
      private_key: { get_input: private_key }
    project: { get_input: project_id }
    zone: { get_input: zone }

node_templates:

  mysql:
    type: cloudify.nodes.DBMS
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/create.py
        configure:
          implementation: scripts/configure.py
          inputs:
            new_password: { get_input: new_password }
            new_users: { get_input: users }
        start:
          implementation: scripts/start.py
          inputs:
            cluster_addresses: { get_attribute: [ cluster, cluster_addresses ] }
            master:  { get_attribute: [ cluster, master ] }
    relationships:
    - type: cloudify.relationships.contained_in
      target: host
    - type: cloudify.relationships.depends_on
      target: cluster
      source_interfaces:
        cloudify.interfaces.relationship_lifecycle:
          postconfigure:
            implementation: scripts/cluster.py
      properties:
        connection_type: all_to_one

  cluster:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/cluster.py
          executor: central_deployment_agent
    relationships:
    - type: cloudify.relationships.depends_on
      target: host
      properties:
        connection_type: all_to_all

  host:
    type: cloudify.gcp.nodes.Instance
    properties:
      gcp_config: *gcp_config
      agent_config:
        install_method: remote
        user: { get_input: agent_user }
        port: 22
        key: { get_secret: agent_key_private }
      image_id: { get_input: image }
      instance_type: { get_input: instance_type }
      zone: { get_input: zone }
      external_ip: true
      block_project_ssh_keys: true
      startup_script:
        type: string
        script:
          concat:
          - |
            cat <<EOT >> /etc/yum.repos.d/mariadb.repo
            [mariadb]
            name = MariaDB
            baseurl = http://yum.mariadb.org/10.1/centos7-amd64
            gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
            gpgcheck=1
            EOT
          - |
            chown root:root /etc/yum.repos.d/mariadb.repo
            chmod 0444 /etc/yum.repos.d/mariadb.repo
            yum -t -y install MariaDB-server MariaDB-client MariaDB-compat galera socat jemalloc python-pip python-wheel python-setuptools python-devel mysql-devel MySQL-python firewalld xinetd
            setenforce 0
            systemctl enable mariadb
            systemctl start mariadb
    relationships:
      - type: cloudify.relationships.depends_on
        target: subnetwork
    interfaces:
      cloudify.interfaces.lifecycle:
        create: &instance_ssh_key_prep
          implementation: scripts/gcp/instance_ssh_key.py
          executor: central_deployment_agent
          inputs:
            user: { get_input: agent_user }
            ssh_keys:
            - { get_secret: agent_key_public }

  mariadb_fw:
    type: cloudify.gcp.nodes.FirewallRule
    properties:
      gcp_config: *gcp_config
      allowed:
        tcp:
          - 22
          - 3306
          - 4444
          - 4567
          - 4568
      sources:
        - 0.0.0.0/0
    relationships:
      - type: cloudify.relationships.connected_to
        target: network

  subnetwork:
    type: cloudify.gcp.nodes.SubNetwork
    properties:
      use_external_resource: true
      name: { get_secret: management_subnetwork_name }
      region: { get_secret: region }
      gcp_config: *gcp_config
    relationships:
      - type: cloudify.gcp.relationships.contained_in_network
        target: network

  network:
    type: cloudify.gcp.nodes.Network
    properties:
      use_external_resource: true
      name: { get_secret: management_network_name }
      gcp_config: *gcp_config

outputs:

  cluster_addresses:
    description: Cluster Addresses
    value: { get_attribute: [ cluster, cluster_addresses ] }

  master:
    description: master node ip
    value: { get_attribute: [ cluster, master ] }

groups:

  app_group:
    members:
    - mysql
    - host

policies:

  app_group_policy:
    type: cloudify.policies.scaling
    properties:
      default_instances: 1
    targets: [app_group]
