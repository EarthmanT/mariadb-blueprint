tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint creates a Kubernetes Cluster.

imports:
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/4.1/resources/rest-service/cloudify/types/types.yaml
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-aws-plugin/1.5/plugin.yaml
  - https://raw.githubusercontent.com/cloudify-incubator/cloudify-utilities-plugin/1.2.5/plugin.yaml
  - imports/cloud-config.yaml

inputs:

  ami:
    description: >
      An AWS AMI. Tested with a Centos 7.0 image.
    default: { get_secret: centos_core_image }

  instance_type:
    description: >
      The AWS instance_type. Tested with m3.medium, although that is unnecessarily large.
    default: t2.medium

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: ec2-user

  new_password:
    default: new_password

  users:
    default:
      demo:
        privileges: [ALL PRIVILEGES]

dsl_definitions:

    aws_config: &aws_config
      aws_access_key_id: { get_secret: aws_access_key_id }
      aws_secret_access_key: { get_secret: aws_secret_access_key }
      ec2_region_name: { get_secret: ec2_region_name }
      ec2_region_endpoint: { get_secret: ec2_region_endpoint }

node_templates:

  mysql:
    type: cloudify.nodes.DBMS
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/create.py
        configure:
          implementation: scripts/configure.py
          inputs:
            new_password: { get_input: new_password }
            users: { get_input: users }
        start:
          implementation: scripts/start.py
          inputs:
            cluster_addresses: { get_attribute: [ cluster, cluster_addresses ] }
            master:  { get_attribute: [ cluster, master ] }
    relationships:
    - type: cloudify.relationships.contained_in
      target: host
    - type: cloudify.relationships.depends_on
      target: cluster
      source_interfaces:
        cloudify.interfaces.relationship_lifecycle:
          postconfigure:
            implementation: scripts/cluster.py
      properties:
        connection_type: all_to_one

  cluster:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/cluster.py
          executor: central_deployment_agent
    relationships:
    - type: cloudify.relationships.depends_on
      target: host
      properties:
        connection_type: all_to_all

  host:
    type: cloudify.aws.nodes.Instance
    properties:
      agent_config:
        install_method: remote
        user: { get_input: agent_user }
        port: 22
        key: { get_secret: agent_key_private }
      aws_config: *aws_config
      image_id: { get_input: ami }
      instance_type: { get_input: instance_type }
    relationships:
    - type: cloudify.aws.relationships.instance_connected_to_subnet
      target: public_subnet
    - type: cloudify.aws.relationships.instance_connected_to_security_group
      target: security_group
    - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
      target: ip
    - type: cloudify.relationships.depends_on
      target: cloudify_host_cloud_config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.ec2.instance.create
          inputs:
            args:
              placement: { get_secret: availability_zone }
              user_data: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }


  security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: Security group for Kubernetes Cluster
      rules:
      - ip_protocol: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - ip_protocol: tcp
        from_port: 3306
        to_port: 3306
        cidr_ip: 0.0.0.0/0
      - ip_protocol: tcp
        from_port: 4444
        to_port: 4444
        cidr_ip: 0.0.0.0/0
      - ip_protocol: tcp
        from_port: 4567
        to_port: 4568
        cidr_ip: 0.0.0.0/0
    relationships:
    - type: cloudify.aws.relationships.security_group_contained_in_vpc
      target: vpc

  ip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_config
      domain: vpc

  public_subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_secret: public_subnet_id }
      cidr_block: N/A
      availability_zone: N/A
    relationships:
    - type: cloudify.aws.relationships.subnet_contained_in_vpc
      target: vpc

  vpc:
    type: cloudify.aws.nodes.VPC
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_secret: vpc_id }
      cidr_block: N/A

outputs:

  ip:
    description: Public IP Address
    value: { get_attribute: [ ip, aws_resource_id ] }

groups:

  app_group:
    members:
    - mysql
    - host
    - ip

policies:

  app_group_policy:
    type: cloudify.policies.scaling
    properties:
      default_instances:  1
    targets: [app_group]

