tosca_definitions_version: cloudify_dsl_1_3

imports:
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/4.2/resources/rest-service/cloudify/types/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/2.4.1.1/plugin.yaml
  - http://www.getcloudify.org/spec/utilities-plugin/1.4.1/plugin.yaml
  - https://raw.githubusercontent.com/cloudify-incubator/cloudify-utilities-plugin/1.4.1/cloudify_cloudinit/types.yaml
  - imports/cloud-config.yaml

inputs:

  image:
    description: >
      Image to be used when launching agent VM's
    type: string
    default: { get_secret: centos_core_image }

  flavor:
    description: >
      Flavor of the agent VM's
    type: string
    default: { get_secret: small_image_flavor }

  agent_user:
    description: >
      User for connecting to agent VM's
    type: string
    default: centos

  new_password:
    default: new_password

  users:
    default:
      demo:
        privileges: [ALL PRIVILEGES]

dsl_definitions:

  openstack_config: &openstack_config
    username: { get_secret: keystone_username }
    password: { get_secret: keystone_password }
    tenant_name: { get_secret: keystone_tenant_name }
    auth_url: { get_secret: keystone_url }
    region: { get_secret: region }

node_templates:

  mysql:
    type: cloudify.nodes.DBMS
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/create.py
        configure:
          implementation: scripts/configure.py
          inputs:
            new_password: { get_input: new_password }
            new_users: { get_input: users }
        start:
          implementation: scripts/start.py
          inputs:
            cluster_addresses: { get_attribute: [ cluster, cluster_addresses ] }
            master:  { get_attribute: [ cluster, master ] }
    relationships:
    - type: cloudify.relationships.contained_in
      target: host
    - type: cloudify.relationships.depends_on
      target: cluster
      source_interfaces:
        cloudify.interfaces.relationship_lifecycle:
          postconfigure:
            implementation: scripts/cluster.py
      properties:
        connection_type: all_to_one

  cluster:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/cluster.py
          executor: central_deployment_agent
    relationships:
    - type: cloudify.relationships.depends_on
      target: host
      properties:
        connection_type: all_to_all

  host:
    type: cloudify.openstack.nodes.Server
    properties:
      openstack_config: *openstack_config
      agent_config:
          user: { get_input: agent_user }
          install_method: remote
          port: 22
          key: { get_secret: agent_key_private }
      server:
        key_name: ''
        image: ''
        flavor: ''
      management_network_name: { get_property: [ network1, resource_id ] }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              image: { get_input: image }
              flavor: { get_input: flavor }
              userdata: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }
    relationships:
    - type: cloudify.relationships.contained_in
      target: mysql_scale_group
    - type: cloudify.openstack.server_connected_to_port
      target: port
    - type: cloudify.relationships.depends_on
      target: cloudify_host_cloud_config

  port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: network1
    - type: cloudify.relationships.depends_on
      target: subnet1
    - type: cloudify.openstack.port_connected_to_security_group
      target: security_group

  security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: openstack_security_group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: 22
        - remote_ip_prefix: 0.0.0.0/0
          port: 3306
        - remote_ip_prefix: 0.0.0.0/0
          port: 4444
        - remote_ip_prefix: 0.0.0.0/0
          port: 4567
        - remote_ip_prefix: 0.0.0.0/0
          port: 4568

  subnet1:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_secret: private_subnet_name }
    relationships:
    - target: network1
      type: cloudify.relationships.contained_in

  network1:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_secret: private_network_name }
    relationships:
    - type: cloudify.relationships.contained_in
      target: mysql_scale_group

  mysql_scale_group:
    type: cloudify.nodes.Tier

outputs:

  cluster_addresses:
    description: Cluster Addresses
    value: { get_attribute: [ cluster, cluster_addresses ] }

  master:
    description: master node ip
    value: { get_attribute: [ cluster, master ] }

groups:

  app_group:
    members:
    - mysql
    - host
    - port
    - mysql_scale_group

policies:

  app_group_policy:
    type: cloudify.policies.scaling
    properties:
      default_instances: 1
    targets: [app_group]
